https://practice.geeksforgeeks.org/problems/all-unique-permutations-of-an-array/1?page=4&category[]=Recursion&sortBy=difficulty

#include <bits/stdc++.h>

vector<vector<int>> uniquePerms(vector<int> arr, int n) {
    if (n == 1) {
        vector<vector<int>> ans;
        ans.push_back({arr[0]});
        return ans;
    }
    
    vector<vector<int>> ans = uniquePerms({arr.begin() + 1, arr.end()}, n - 1);
    vector<vector<int>> finalans;
    
    for (int i = 0; i < ans.size(); i++) {
        for (int j = 0; j <= ans[i].size(); j++) {
            vector<int> working = ans[i];
            vector<int> finalperm;
            int k = 0;
            while (k < j) {
                finalperm.push_back(working[k]);
                k++;
            }
            finalperm.push_back(arr[0]);
            while (k < working.size()) {
                finalperm.push_back(working[k]);
                k++;
            }
            finalans.push_back(finalperm);
        }
    }
    
    set<vector<int>> st;
    for (int i = 0; i < finalans.size(); i++) {
        st.insert(finalans[i]);
    }
    
    vector<vector<int>> finalans2;
    for (auto it = st.begin(); it != st.end(); it++) {
        finalans2.push_back(*it);
    }
    
    return finalans2;
}
