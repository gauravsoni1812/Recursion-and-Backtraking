https://practice.geeksforgeeks.org/problems/solve-the-sudoku-1587115621/1


#define N 9

bool isTrue(int grid[N][N], int row, int col, int num) {
    for (int i = 0; i < N; i++) {
        if (grid[row][i] == num) {
            return false;
        }
    }
    
    for (int i = 0; i < N; i++) {
        if (grid[i][col] == num) {
            return false;
        }
    }
    
    int m, n;
    if (row <= 2) {
        m = 0;
    }
    else if (row > 2 && row <= 5) {
        m = 3;
    }
    else if (row > 5 && row <= 8) {
        m = 6;
    }
    
    if (col <= 2) {
        n = 0;
    }
    else if (col > 2 && col <= 5) {
        n = 3;
    }
    else if (col > 5 && col <= 8) {
        n = 6;
    }
    
    int j = m + 3;
    int k = n + 3;
    for (int i = m; i < j; i++) {
        for (int j = n; j < k; j++) {
            if (grid[i][j] == num) {
                return false;
            }
        }
    }
    return true;
}

bool SolveSudoku(int grid[N][N]) {
    bool filled = false;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (grid[i][j] == 0) {
                for (int k = 1; k <= 9; k++) {
                    if (isTrue(grid, i, j, k)) {
                        grid[i][j] = k;
                        if (SolveSudoku(grid)) {
                            return true;
                        }
                        grid[i][j] = 0;
                    }
                }
                return false;
            }
        }
    }
    return true;
 }
 
 void printGrid(int grid[N][N])
{
    // Your code here
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cout << grid[i][j] << " ";
        }
 
    }
}
