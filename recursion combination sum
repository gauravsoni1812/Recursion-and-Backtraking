
https://practice.geeksforgeeks.org/problems/combination-sum-1587115620/1?page=1&category[]=Recursion&sortBy=submissions

void fn(int ind, int target, vector<int> &arr, vector<int> &ds, vector<vector<int>> &ans)
{
    if (ind == arr.size())
    {
        if (target == 0)
            ans.push_back(ds);

        return;
    }
    if (target == 0)
    {
        ans.push_back(ds);

        return;
    }
    // pick
    if (arr[ind] <= target)
    {
        ds.push_back(arr[ind]);
        fn(ind, target - arr[ind], arr, ds, ans);
        ds.pop_back();
    }

    // not Pick
    fn(ind + 1, target, arr, ds, ans);
}

vector<vector<int>> combinationSum(vector<int> &arr, int k)
{
    // Your code here
    sort(arr.begin(), arr.end());
    arr.erase(unique(arr.begin(), arr.end()), arr.end());
    vector<int> ds;
    vector<vector<int>> ans;
    fn(0, k, arr, ds, ans);
    return ans;
}
